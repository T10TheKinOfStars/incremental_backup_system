// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SmartSync.h"
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <sstream>
#include "checksum.hpp"
#include "mytypes.h"
#include "common.h"
#include "package.hpp"
#include "search.hpp"
#include "file.hpp"
#include <mutex>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/server/TThreadedServer.h>

//cannot use namespace std, since it will lead to shared_ptr ambiguous
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

static FileWorker *fworker = NULL;
static ChksumWorker *chkworker = NULL;
static Package *pkgworker = NULL;
static SearchWorker *searchworker = NULL;

std::mutex mtx;
std::unordered_map<std::string,int> filestatus;
int currclient = -1;

class SmartSyncHandler : virtual public SmartSyncIf {
 public:
  SmartSyncHandler() {
    // Your initialization goes here
  }

  void writeFile2Server(StatusReport& _return, const RFile& rFile) {
    // Your implementation goes here
    dprintf("---------------------------writeFile-----------------------------------\n");

    mtx.lock();
    currclient = rFile.meta.target;
    mtx.unlock();

    if (fworker->writefile(rFile) != -1) {
        _return.__set_status(Status::SUCCESS);
    } else {
        _return.__set_status(Status::FAIL);
    }

    mtx.lock();
    dprintf("set currclient to none\n");
    currclient = -1;
    dprintf("Before change filestaus value, [%s]'s status is %d\n",rFile.meta.filename.c_str(),filestatus[rFile.meta.filename]);
    filestatus[rFile.meta.filename] = 0;
    dprintf("After writefile, file %s's file status is %d\n",rFile.meta.filename.c_str(),filestatus[rFile.meta.filename]);
    mtx.unlock();

    dprintf("=========================end writeFile================================\n");
  }

  void getFileFromServer(std::string& _return, const std::string& fName, const int32_t clientID) {
    // Your implementation goes here
    dprintf("getFileFromServer\n");
  }

  void updateLocal(std::vector<Filedes> & _return, const std::vector<Filechk> & chks, const int32_t clientID) {
    // Your implementation goes here
    //update file on client side
    dprintf("----------------------------updateLocal-----------------------------------\n");
    if ((int)chks.size() * 1000000 < fworker->getFileSize()) {
        _return = fworker->getFiledes();     
    } else {
        pkgworker->initchksums(chks);
        searchworker->init(pkgworker->getchksums());

        searchworker->find();
        _return = pkgworker->getFiledes(); 
    }
    dprintf("==============================end updateLocal=============================\n");
  }

  void updateServer(StatusReport& _return, const std::vector<Filedes> & des, const int32_t clientID) {
    // Your implementation goes here
    dprintf("-------------------------------updateServer-------------------------------\n");
    dprintf("currclient is %d\n",currclient);
    //here I dont set currclient, because this operation is bind with request operation
    if (fworker->updateFile(des)) {
        _return.__set_status(Status::SUCCESS);
    } else {
        _return.__set_status(Status::FAIL);
    }
    string filename = fworker->getFilename();
    
    mtx.lock();
    dprintf("set currclient to -1\n");
    currclient = -1;
    dprintf("Before change filestaus value, [%s]'s status is %d\n",filename.c_str(),filestatus[filename]);
    filestatus[filename] = 0;
    dprintf("After update, file [%s]'s file status is %d\n",filename.c_str(),filestatus[filename]);
    mtx.unlock();

    dprintf("=================================end updateServer=========================\n");
  }

  void request(std::vector<Filechk> & _return, const int32_t clientID) {
    // Your implementation goes here
    dprintf("------------------------------request filechecks list---------------------\n");

    mtx.lock();
    dprintf("set currclient to %d\n",clientID);
    currclient = clientID;
    mtx.unlock();

    vector<string> file;
    ifstream ifs(fworker->getPath().c_str());
    double filesize = fworker->getFileSize();
    int blocksize = fworker->getBlockSize();
    if (ifs) {
        for (int i = 0; i < (int)ceil(filesize/blocksize); ++i) {
            char *buf = new char[blocksize+1];
            ifs.read(buf,blocksize);
            buf[ifs.gcount()] = '\0';
            file.push_back(buf);
            delete [] buf;
        }
    } else {
        cerr<<"open file error"<<endl;
        exit(-1);
    }
    ifs.close();
    int l;
    int bsize = fworker->getBlockSize();
    int fsize = fworker->getFileSize();
    for (int i = 0; i < (int)file.size(); ++i) {
        if (i == (int)file.size() - 1) {
            l = fsize - i*bsize-1;
        } else {
            l = bsize-1;
        }
        //cout<<"len is "<<l+1<<" file block content is "<<file[i]<<endl;
        checksum num1 = 1;
        checksum num2 = 0;
        //cout<<"k is "<<i*bsize<<" l is "<<i*bsize+l<<endl;
        checksum rchk = chkworker->rolling_chksum1(file[i],i*bsize,i*bsize + l,num1,num2);
        string md5chk = chkworker->md5_chksum(file[i]);
        Filechk temp;
        temp.__set_rollchk(rchk);
        temp.__set_md5chk(md5chk);
        temp.__set_block(i);
        temp.__set_num1(num1);
        temp.__set_num2(num2);

        _return.push_back(temp);
    }
    //here I dont set currclient to -1, because this operation is bind with request operation
    dprintf("=============================end request===============================\n");
    /*
    cout<<"in request show _return "<<endl;
    for (int i = 0; i < (int)_return.size();++i) {
        cout<<i<< " roll:"<<_return[i].rollchk
            <<" num1:"<<_return[i].num1
            <<" num2:"<<_return[i].num2
            <<" md5:"<<_return[i].md5chk
            <<" block:"<<_return[i].block
            <<endl;
    }
    cout<<"in request end show"<<endl;
    */
  }

  void checkFile(StatusReport& _return, const RFileMetadata& meta) {
    // Your implementation goes here
    if (currclient != meta.target) {
        mtx.lock();
        dprintf("----------------In checkFile--------------\n");
        dprintf("client %d access the server\n",meta.target);
        std::string filename = meta.filename;
        if (filestatus.find(filename) == filestatus.end()) {
            dprintf("file doesnt exist, filestatus[%s] set to 1 means start write from client to server\n",filename.c_str());
            filestatus[filename] = 1;
            currclient = meta.target;
            dprintf("Set currclient to %d\n",currclient);
            mtx.unlock();
        } else {
            mtx.unlock();
            dprintf("file [%s]'s status is %d and current client is %d\n",filename.c_str(),filestatus[filename],currclient); 
            if (filestatus[filename] != 0 && currclient == meta.target) {
                //means server is still doing work, client cannot do other things
                dprintf("Server is updating file [%s], the same client %d cannot do anything to the same file\n",filename.c_str(),currclient);
                _return.__set_status(Status::BLOCK);
                return;
            } 
        }
    }
    //clean pkgworker
    pkgworker->clean();
    fworker->setPath("./files/"+meta.filename);
    //struct stat st;
    NameDataMap mymap = fworker->getMap();
    Timestamp t = mymap[meta.filename].updated;
    //string filename = meta.filename;
    if (access(fworker->getPath().c_str(),F_OK) == 0) {
        //means exist
        //check content whether is the same
        //string fcontent;
        //first check md5, if not same, then check update time
        //dprintf("file path is %s\n",fworker->getPath().c_str());
        ifstream ifs(fworker->getPath().c_str());
        if (ifs) {
            ifs.seekg(0,ifs.end);
            int len = ifs.tellg();

            fworker->setFileSize(len);

            ifs.seekg(0,ifs.beg);
            char* buf = new char[len+1];
            ifs.read(buf,len);
            buf[ifs.gcount()] = '\0';
            string fmd5 = md5(buf);
            delete []buf;
            ifs.close();
            
            mtx.lock();
            if (fmd5 == meta.contenthash) {
                //it means the same
                dprintf("same\n");
                filestatus[meta.filename] = 0;
                currclient = -1;
                _return.__set_status(Status::SAME);
            } else {
                if (t < meta.updated) {
                    //client newer
                    dprintf("client is newer, the server needs update\n");
                    filestatus[meta.filename] = 2;
                    currclient = meta.target;
                    _return.__set_status(Status::NEWER);
                } else if (t > meta.updated) {
                    //server newer
                    dprintf("client is older, client needs update\n");
                    filestatus[meta.filename] = 3;
                    currclient = meta.target;
                    _return.__set_status(Status::OLDER);
                } else {
                    ;
                }
            }
            mtx.unlock();
        }
    } else {
        dprintf("file not exist\n");
        _return.__set_status(Status::NOEXIST);
    }
    dprintf("==========================end check================================\n\n");
  }

};

int main(int argc, char **argv) {
  if (argc < 1) {
    cout<<"You should exec like ./server 1024\n 1024 stands for blocksize is 1024Byte.\n";
    return 0;
  }
  int port = 9090;
  boost::shared_ptr<SmartSyncHandler> handler(new SmartSyncHandler());
  boost::shared_ptr<TProcessor> processor(new SmartSyncProcessor(handler));
  boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  boost::shared_ptr<ThreadManager> threadManager(ThreadManager::newSimpleThreadManager(4));
  boost::shared_ptr<PosixThreadFactory> threadFactory(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start();

  TThreadedServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  fworker = new FileWorker();
  chkworker = new ChksumWorker();
  pkgworker = new Package();
  searchworker = new SearchWorker(chkworker,fworker,pkgworker);  

  fworker->initFolder();
  fworker->setBlockSize(atoi(argv[1]));

  server.serve();
  return 0;
}

